// Generated by CoffeeScript 1.3.3
var events;

events = {
  monday: [
    {
      title: "Engelska C",
      description: "etc. etc",
      start: new Date("2012-10-01 10:00"),
      end: new Date("2012-10-01 12:00")
    }, {
      title: "Matematik Klass A",
      description: "etc. etc",
      start: new Date("2012-10-01 13:45"),
      end: new Date("2012-10-02 14:45")
    }, {
      title: "Matematik",
      description: "Mats Eriksson",
      start: new Date("2012-10-01 14:30"),
      end: new Date("2012-10-02 15:00")
    }, {
      title: "Svenska A",
      description: "etc. etc",
      start: new Date("2012-10-01 15:30"),
      end: new Date("2012-10-02 17:00")
    }
  ],
  tuesday: [
    {
      title: "Historia C",
      description: "etc. etc",
      start: new Date("2012-10-01 08:00"),
      end: new Date("2012-10-01 09:20")
    }, {
      title: "Matematik",
      description: "etc. etc",
      start: new Date("2012-10-01 12:45"),
      end: new Date("2012-10-02 14:00")
    }, {
      title: "Matematik",
      description: "Mats Eriksson",
      start: new Date("2012-10-01 16:30"),
      end: new Date("2012-10-02 17:00")
    }
  ],
  wednesday: [
    {
      title: "Historia C",
      description: "etc. etc",
      start: new Date("2012-10-01 08:00"),
      end: new Date("2012-10-01 09:20")
    }, {
      title: "Geografi",
      description: "Mats Eriksson",
      start: new Date("2012-10-01 13:30"),
      end: new Date("2012-10-02 17:00")
    }
  ],
  thursday: [
    {
      title: "Historia C",
      description: "etc. etc",
      start: new Date("2012-10-01 08:10"),
      end: new Date("2012-10-01 09:20")
    }, {
      title: "Matematik",
      description: "Mats Eriksson",
      start: new Date("2012-10-01 16:30"),
      end: new Date("2012-10-02 17:00")
    }
  ],
  friday: [
    {
      title: "Religion AB",
      description: "etc. etc",
      start: new Date("2012-10-01 08:00"),
      end: new Date("2012-10-01 09:20")
    }, {
      title: "Matematik",
      description: "etc. etc",
      start: new Date("2012-10-01 11:45"),
      end: new Date("2012-10-02 14:00")
    }, {
      title: "Matematik",
      description: "Mats Eriksson",
      start: new Date("2012-10-01 16:30"),
      end: new Date("2012-10-02 17:00")
    }
  ]
};

$(function() {
  return $("#schedule").scheduler({
    events: events
  });
});

(function($) {
  var methods;
  Number.prototype.padZero = function(len) {
    var c, s;
    if (len == null) {
      len = 2;
    }
    s = String(this);
    c = '0';
    while (s.length < len) {
      s = c + s;
    }
    return s;
  };
  Date.prototype.getFullMinutes = function() {
    return (this.getHours() * 60) + this.getMinutes();
  };
  methods = {
    init: function(options) {
      var settings;
      settings = $.extend({
        events: [],
        startTime: 8,
        endTime: 20,
        pixelRatio: 1,
        minuteInterval: 30
      }, options);
      return this.each(function() {
        var $event, $this, $ul, day, description, endDate, index, lesson, startDate, title, _index, _ref;
        $this = $(this);
        $this.data("sc-settings", settings);
        $this.addClass("scheduler").html("          <div class=sc-content>            <ul class=sc-event-list></ul>          </div>        ");
        $this.prepend("<button class=btn-change-view>Toggle view</button>");
        $this.on("click", ".btn-change-view", function() {
          var view;
          view = $(this).data("view") === "day" ? "week" : "day";
          $(this).data("view", view);
          return $this.scheduler("setViewLayout", view);
        });
        $ul = $this.find(".sc-event-list");
        $ul.on("click", "li", function() {
          return $(this).toggleClass("active");
        });
        _ref = settings.events;
        for (index in _ref) {
          day = _ref[index];
          $ul.append("<li class='sc-event-label'>" + index + "</li>");
          for (_index in day) {
            lesson = day[_index];
            startDate = lesson.start.getHours().padZero() + ":" + lesson.start.getMinutes().padZero();
            endDate = lesson.end.getHours().padZero() + ":" + lesson.end.getMinutes().padZero();
            title = lesson.title;
            description = lesson.description;
            $event = $("              <li class='sc-event sc-event-" + index + "'>                <div class=sc-event-time>                  <div class='sc-event-time-start'>" + startDate + "</div>                  <div class='sc-event-time-end'>" + endDate + "</div>                </div>                <div class='sc-event-content'>                  <strong>" + title + "</strong>                  <div class='sc-event-extra'>                    <p>" + startDate + " - " + endDate + "</p>                    <p>" + description + "</p>                  </div>                </div>              </li>            ");
            $event.data("sc-event", lesson);
            $ul.append($event);
          }
        }
        return $this.scheduler("setViewLayout", "week");
      });
    },
    setViewLayout: function(view) {
      var settings;
      if (view == null) {
        view = "day";
      }
      settings = this.data("sc-settings");
      if (!this.data("sc-time-axis")) {
        this.scheduler("generateTimeAxis");
      }
      switch (view) {
        case "week":
          return this.removeClass("is-dayview").addClass("is-weekview").find(".sc-event").each(function() {
            var $this, dayStart, event, eventEnd, eventStart, topPlacement;
            $this = $(this);
            event = $this.data("sc-event");
            eventStart = event.start.getFullMinutes();
            eventEnd = event.end.getFullMinutes();
            dayStart = settings.startTime * 60;
            console.log(dayStart, eventStart);
            topPlacement = (eventStart - dayStart) * settings.pixelRatio;
            return $this.css({
              top: topPlacement,
              height: (eventEnd - eventStart) * settings.pixelRatio
            });
          });
        default:
          return this.removeClass("is-weekview").addClass("is-dayview").find(".sc-event").each(function() {
            return $(this).css({
              top: 0,
              height: "auto"
            });
          });
      }
    },
    generateTimeAxis: function() {
      var currentRow, dom, endTime, hour, minute, numberOfRows, rowHeight, settings, startTime, timespan;
      settings = this.data("sc-settings");
      this.data('sc-time-axis', true);
      console.log(settings);
      endTime = settings.endTime * 60;
      startTime = settings.startTime * 60;
      timespan = endTime - startTime;
      console.log(timespan, startTime, endTime, settings.startTime);
      numberOfRows = timespan / settings.minuteInterval;
      rowHeight = settings.minuteInterval * settings.pixelRatio;
      dom = (function() {
        var _i, _results;
        _results = [];
        for (currentRow = _i = 0; _i <= numberOfRows; currentRow = _i += 1) {
          hour = Math.floor((startTime + currentRow * settings.minuteInterval) / 60).padZero();
          minute = ((startTime + currentRow * settings.minuteInterval) % 60).padZero();
          console.log(currentRow, hour);
          _results.push($("<li class=sc-time-axis-row>" + hour + ":" + minute + "</li>").css("height", rowHeight));
        }
        return _results;
      })();
      return $("<ul class=sc-time-axis>").append(dom).prependTo(this);
    }
  };
  return $.fn.scheduler = function(method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === "object" || !method) {
      return methods.init.apply(this, arguments);
    } else {
      return $.error("Method " + method + " does not exist on jQuery.scheduler");
    }
  };
})(jQuery);
